Day-1
======
# What is VCS. Why we need VCS.
	VCS features.

GIT is called as 
	version controll system(VCS).
	Revisioned controll system(RCS).
	Source code management(SCM).

#
GIT Installation (Ubuntu):
$ sudo apt-get update
$ sudo apt-get install git

Verify Installation:
	which git
	git --version


GIT Uninstallation:
$ sudo apt-get remove git


#
Git Architecture Diagram

	------------------------------------------------------	
	. (Souce area) | ..(Stage) | .git (Local Repository) |
		       |           |			     |
	------------------------------------------------------

	- Centralized VCS -  Ex: CVS/SVN/Clearcase/Perforce
	- Distributed VCS -  Ex: GIT/Bitkeeper

Day-2
======
Creating remote repository in github
===============
1. create an account in github.com
	URL: https://github.com

2. login github.com with your credentials. 	
	click on "new repository" --> give a name "DevOps_Classes" --> "create reopository" 

3. copy the repo URL from Github:
	https://github.com/swapnilmahajan-git/DevOps_Classes.git

4. Clone the source code from remote repository using 'git clone' command
	$ git clone https://github.com/swapnilmahajan-git/DevOps_Classes.git

5. 	$ cd DevOps_Classes 

		(Note - observe ".git" folder. ".git" is called as "Local Reposiotory".)

6. Create some sample code and submit the code to remote repo.

	    $ touch Login.java
		or 
	    $ vim Login.java  (Note -> create file using command or go to directory and create new document)

	    $ git status
		- check the status of files.

	    $ git add Login.java
		- Move file from (.)source area to (..)stage area 

	    $ git status
		- check the status of files.

		Note :- If you are doing First time commit then apply  config --global command

	    $ git commit Login.java -m "login module code"
		- move from stage area to .git area

	    $ git status
		- check the status of files.

	    $ git push
 		- move from .git to reomte area.

	    $ git log 
		- check log of the commit  

#
- Git Commit structure
	User/Email
	Timestamp
	Commit message
	
#
SHA / Version / Revison


#
Setting up mandatory configurations:
=============================================
$ git config --global user.name "swapnil"
$ git config --global user.email "abc@gmail.com"

$ git config --global credential.helper cache

Check the configurations using below command
$ git config --list

Git stores all configurations in below file
"/home/swapnil/.gitconfig"



Day-3
======
# Understand Git Jargon.
	- Remote Repository --- github server
	- Working Directory ---- (.)
	- Local Repository  ----- (.git)
	- Stage/"Staging Index" ---- (..)


#It is remote repo url for clone the files.
	$ git remote -v
 
#If you want downlod remote repository (ie. folder) then apply this commnad (It is first time activity).
	$ git clone <repo-url>

#If you want to download modified content from remote repo then apply this command, after git pull your modified changes comes in source area.
	$ git pull

#If you want to download modified content from remote repo then apply this command, But you dont want to merge modified content in your source area then apply this command
	$ git fetch

# Skip staging
	git commit -am "submit all pending changes"
Note: If you want to skip the staging, you need to commit all pending changes.


# Creating up Local repository
1. create/initialize a local repository with 'git init' command
	$ git init <folder-name>
	$ git remote add <folder-name> <repo-url>
	$ git push <folder-name>
	$ git push --set-upstream <folder-name> master



2. Observe the local repository
	$ ls -a 
		(you can see the .git folder. this is called the "local repository")

3.create some source code.. ex: vim Login.java

4.Adding the file to STAGE.
	$ git add <filename>

5.Commiting the file to local repository
	$ git commit <filename> -m "lgoin module code"

6.Check the log of Login.java using log command.
	$ git log <filename>


Day-4
======
# History - Deep Dive
	$ git log <filename>
	$ git log

	Options:
		- git log -n2
		- git log --author="swapnil"
		- git log --since="2016/12/13"
		- git log --until="2016/12/13"
		- git log --grep="DB code"		
		- git log --oneline (if we want to see logs on high level that time we can use this command ie. only commit ids and msg)

#Qn.
Show me all logs committed by user "Ram" AND has a commit message "math function" in it.

$ git log --author="Ram" --grep="math function"


Day-5
=====
# GIT Commands

1.  
	$ git status 

	$ git diff <filename> (if file is already present in remote repo and we are something modify in this file that time we can use this command)
		    (Note :- This command is useful on existing file).

	$ git diff --staged <filename> (if the file is added (i.e git add coomand) into the stage area then you want see the changes that time we can use this command)

	$ git diff  089871935..fc894a6bf6d2e (if we want to see difference between two files)(use commit ids).


2. Deleting a file

	A.) $ git rm <filename> (NOte:- If we are remove a file from repo, then you must commit it again this file).
	    $ git commit <filename> -m "comment"
       
	Suppose if we want the deleted file again then use the below command 
	
	B.) $ git checkout shavalue(i.e 123abc..)
 		(Note :- Deletion is not permantaly in git we can get any file anytime from previous version)


4. Renaming a file/folder
	A.) $ git mv Login.java Login1.java
		$ git commit -m "rename Login"
		$ git push
			
#
Carry the history for new file from old file
	- $ git log --follow Login.java




